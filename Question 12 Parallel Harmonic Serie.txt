Question 12: Parallel Harmonic Series Sum - 1/1! + 1/2! + 1/3! + ... + 1/N!


#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <math.h>

// Function to calculate factorial (returns double to handle large values)
double factorial(int n) {
    double result = 1.0;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

// Function to calculate 1/n! more efficiently using iterative approach
double calculate_reciprocal_factorial(int n) {
    if (n == 0) return 1.0;
    
    double result = 1.0;
    for (int i = 1; i <= n; i++) {
        result /= i;
    }
    return result;
}

int main(int argc, char** argv) {
    int rank, size;
    int N = 15;  // Calculate sum up to 1/N!
    int local_start, local_end;
    double local_sum = 0.0;
    double total_sum = 0.0;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    
    // Calculate range for each process (terms from 1 to N)
    int terms_per_process = N / size;
    local_start = rank * terms_per_process + 1;
    local_end = (rank == size - 1) ? N : (rank + 1) * terms_per_process;
    
    printf("Process %d: Computing 1/n! for n = %d to %d\n", rank, local_start, local_end);
    
    // Calculate local sum
    for (int i = local_start; i <= local_end; i++) {
        double term = calculate_reciprocal_factorial(i);
        local_sum += term;
        printf("Process %d: 1/%d! = %.10f\n", rank, i, term);
    }
    
    printf("Process %d: Local sum = %.10f\n", rank, local_sum);
    
    // Reduce all partial sums
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    
    // Master process reports results
    if (rank == 0) {
        printf("\n=== RESULTS ===\n");
        printf("Series: 1/1! + 1/2! + 1/3! + ... + 1/%d!\n", N);
        printf("Total sum = %.15f\n", total_sum);
        
        // Verification: Calculate expected value (e - 1)
        double expected = exp(1.0) - 1.0;
        printf("Expected value (e - 1) = %.15f\n", expected);
        printf("Difference = %.15f\n", fabs(total_sum - expected));
        
        // Show convergence
        printf("Convergence analysis:\n");
        printf("e = %.15f\n", exp(1.0));
        printf("Our sum + 1 = %.15f\n", total_sum + 1.0);
        printf("Error in approximating e = %.15f\n", fabs((total_sum + 1.0) - exp(1.0)));
        
        // Also show the complete expansion for verification
        printf("\nComplete expansion verification:\n");
        double verification_sum = 0.0;
        for (int i = 1; i <= N; i++) {
            double term = calculate_reciprocal_factorial(i);
            verification_sum += term;
            printf("1/%d! = %.10f (cumulative: %.10f)\n", i, term, verification_sum);
        }
        printf("Sequential verification sum = %.15f\n", verification_sum);
        
        // Show how series converges to e-1
        printf("\nConvergence to e-1:\n");
        double running_sum = 0.0;
        for (int i = 1; i <= N; i++) {
            running_sum += calculate_reciprocal_factorial(i);
            printf("Sum up to 1/%d! = %.10f (error from e-1: %.10f)\n", 
                   i, running_sum, fabs(running_sum - (exp(1.0) - 1.0)));
        }
    }
    
    MPI_Finalize();
    return 0;
}